name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  test:
    name: "Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install Poetry
        run: |
          pip install poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Run tests
        run: |
          poetry run pytest -v --maxfail=1 --disable-warnings --cov=enum_deprecation --cov-report=term-missing

      - name: Type check (mypy)
        run: |
          poetry run mypy enum_deprecation tests

      - name: Run tox (multi-env consistency)
        run: |
          poetry run tox -p all

      - name: Upload coverage summary
        if: success() || failure()
        run: |
          echo "### 🧪 Coverage summary" >> $GITHUB_STEP_SUMMARY
          poetry run coverage report >> $GITHUB_STEP_SUMMARY

  publish:
    name: Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: pypi
      url: https://pypi.org/p/enum-deprecation

    permissions:
      id-token: write   # <-- required for PyPI Trusted Publishing
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install Poetry
        run: |
          pip install poetry
          poetry --version

      - name: Verify tag matches project version
        id: verify
        run: |
          poetry version -s
          VERSION="$(poetry version -s)"
          TAG="${GITHUB_REF_NAME#v}"
          echo "Version: $VERSION"
          echo "Tag:     $TAG"
          if [ "$VERSION" != "$TAG" ]; then
            echo "❌ Tag v$TAG does not match pyproject version $VERSION"
            exit 1
          fi

      - name: Build distributions
        run: |
          poetry build

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # With Trusted Publishing you do NOT provide a token.
          packages-dir: dist
          # To skip if this is a pre-release, uncomment next line:
          # skip-existing: true
